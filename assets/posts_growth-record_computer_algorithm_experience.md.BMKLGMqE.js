import{_ as e,c as t,o as a,a6 as o}from"./chunks/framework.BOyJDVBP.js";const b=JSON.parse('{"title":"算法学习心得","description":"","frontmatter":{"title":"算法学习心得","date":"2022-11-13T20:04:04.000Z","tag":["算法"],"categories":["前端进击"]},"headers":[],"relativePath":"posts/growth-record/computer/algorithm/experience.md","filePath":"posts/growth-record/computer/algorithm/experience.md","lastUpdated":1713715426000}'),r={name:"posts/growth-record/computer/algorithm/experience.md"},l=o('<h1 id="算法学习心得" tabindex="-1">算法学习心得 <a class="header-anchor" href="#算法学习心得" aria-label="Permalink to &quot;算法学习心得&quot;">​</a></h1><h2 id="labuladong" tabindex="-1">labuladong <a class="header-anchor" href="#labuladong" aria-label="Permalink to &quot;labuladong&quot;">​</a></h2><blockquote><p>算法的本质是穷举</p></blockquote><p>部分我们所了解的算法是这样的，至于特殊的部分算法偏数学或脑筋急转弯类的需要一定的观察、规律、原理才能解决</p><p>穷举也不简单：无遗漏、无冗余</p><ul><li>遗漏，会直接导致答案出错</li><li>冗余，会拖慢算法的运行速度</li></ul><p>当你看到一道算法题，可以从这两个维度去思考：</p><ul><li>如何穷举？即无遗漏地穷举所有可能解</li><li>如何聪明地穷举？即避免所有冗余的计算，消耗尽可能少的资源求出答案</li></ul><p>不同类型的题目，难点不同，有的难在「如何穷举」上（递归类），有的难在「如何聪明地穷举」上（非递归算法类，本质是优化算法的时间、空间复杂度）</p><blockquote><p>正确的刷题方式应该是刷一道题能获得刷十道题的效果，不然力扣现在 2000 道题目，你都打算刷完么？</p></blockquote><blockquote><p>要有框架思维，学会提炼重点，一个算法技巧可以包装出一百道题，如果你能一眼看穿它的本质，那就没必要浪费时间刷了。同时，在做题的时候要思考，联想，进而培养举一反三的能力</p></blockquote><p><a href="https://labuladong.github.io/algo/1/3/" target="_blank" rel="noreferrer">原文链接🔗</a></p>',12),i=[l];function c(p,n,s,d,u,_){return a(),t("div",{"data-pagefind-body":!0},i)}const g=e(r,[["render",c]]);export{b as __pageData,g as default};
