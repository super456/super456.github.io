import{_ as n,D as i,c as t,o as l,a6 as e,I as s}from"./chunks/framework.BOyJDVBP.js";const v=JSON.parse('{"title":"开发常用命令行","description":"","frontmatter":{"title":"开发常用命令行","date":"2022-07-07T20:00:00.000Z","tag":["工具指南"],"categories":["前端进击"]},"headers":[],"relativePath":"posts/growth-record/other/toolGuide/common-command-line.md","filePath":"posts/growth-record/other/toolGuide/common-command-line.md","lastUpdated":1717341755000}'),o={name:"posts/growth-record/other/toolGuide/common-command-line.md"},c=e(`<h1 id="开发常用命令行" tabindex="-1">开发常用命令行 <a class="header-anchor" href="#开发常用命令行" aria-label="Permalink to &quot;开发常用命令行&quot;">​</a></h1><h2 id="一、nginx-的常用操作" tabindex="-1">一、Nginx 的常用操作 <a class="header-anchor" href="#一、nginx-的常用操作" aria-label="Permalink to &quot;一、Nginx 的常用操作&quot;">​</a></h2><ul><li>停止 Nginx： <code>nginx -s stop</code></li><li>重载配置文件：<code>nginx -s reload</code></li><li>查看文件显示行数：<code>cat -n xxx.txt</code></li><li>查看文件的前 N 行：<code>head -n xxx.txt</code></li><li>查看文件的后 N 行：<code>tail -n xxx.txt</code></li><li>查看指定日志路径下的错误（动态查看日志变化：显示前 500 行）: <code>tail -500f /root/.pm2/logs/xxx.log</code></li></ul><h2 id="二、后台打印日志" tabindex="-1">二、后台打印日志 <a class="header-anchor" href="#二、后台打印日志" aria-label="Permalink to &quot;二、后台打印日志&quot;">​</a></h2><ul><li>连接服务器（Jenkins 该工程下控制台查看部署 IP 地址）</li></ul><p><code>ssh root@ip</code></p><ul><li>进入日志目录</li></ul><p><code>cd /目录地址</code></p><ul><li>实时打印操作日志如上面动态查看日志变化</li></ul><p><code>tail -f 项目文件.log</code></p><h2 id="三、pm2" tabindex="-1">三、PM2 <a class="header-anchor" href="#三、pm2" aria-label="Permalink to &quot;三、PM2&quot;">​</a></h2><ul><li>查看 PM2 下的启动应用：<code>pm2 list</code></li><li>获取更多这个应用信息：<code>pm2 show &lt;id|name&gt;</code></li><li>运行启动指定文件：<code>pm2 start app.js</code></li><li>停止某个 ID 应用：<code>pm2 stop id</code></li><li>重启某个 ID 应用：<code>pm2 restart id</code></li><li>进行监控：<code>pm2 monit</code></li></ul><h2 id="四、npm" tabindex="-1">四、NPM <a class="header-anchor" href="#四、npm" aria-label="Permalink to &quot;四、NPM&quot;">​</a></h2><ul><li>查看 npm 版本：<code>npm -v</code></li><li>快速初始化一个 package.json 的文件：<code>npm init -y</code></li><li>根据 package 安装所有依赖：<code>npm install / npm i</code></li><li>显示安装依赖下载进度：<code>npm install --verbose xxx</code></li><li>查看所有安装包的版本列表：<code>npm ls</code></li><li>查看某个包的安装版本：<code>npm ls &lt;page name&gt;</code></li><li>全局安装：<code>npm i gulp -g</code></li><li>查看全局安装的包：<code>npm list -g --depth 0</code>（<code>--depth 0</code>：限制输出模块层级）</li><li>查看全局下安装所有的可用npm工具：<code>npm list --depth=0 -g</code></li><li>查看全局的包的按照路径：<code>npm root -g</code></li><li>安装/卸载到 devDependencies 下：<code>npm install/uninstall gulp -D/--save-dev</code></li><li>安装/卸载到 dependencies 下：<code>npm install/uninstall gulp -S/--save</code></li><li>删除 node_modules：<code>npm install rimraf -g</code>，执行：<code>rimraf node_modules</code></li><li>查看包版本：<code>npm ls nuxt</code></li><li>清除缓存数据： <code>npm cache clean --force</code></li></ul><h2 id="五、git-操作" tabindex="-1">五、Git 操作 <a class="header-anchor" href="#五、git-操作" aria-label="Permalink to &quot;五、Git 操作&quot;">​</a></h2><ul><li>在本地创建一个空的数据仓库(就会出现一个 .git 的文件)：<code>git init</code></li><li>克隆代码,一般都在第一次操作时，将别人的代码克隆下来：<code>git clone xxx</code></li><li>查看当前 git 的状态：<code>git status</code></li><li>显示文件的详细信息：<code>ll</code></li><li>显示文件：<code>ls</code></li><li>显示文件包括隐藏的文件：<code>ls -a</code></li><li>递归的强制删除：<code>rm -rf xxx</code></li><li>查看a.txt文件中内容：<code>cat a.txt</code></li><li>全局的配置账户信息：<code>git config --global user.name &quot;xxx&quot;</code> <code>git config --global user.email &quot;xxx@qq.com&quot;</code></li><li>当前项目中配置账户信息：<code>git config user.name &quot;xxx&quot;</code> <code>git config user.email &quot;xxx@qq.com&quot;</code></li><li>将当前文件下的都添加：<code>git add .</code></li><li>切换到上一个分支：<code>git checkout -</code></li><li>清空⼯作区修改的内容： <code>git checkout .</code> 清空暂存区和⼯作区内容： <code>git reset --hard</code></li><li>创建提交版本并填写备注：<code>git commit -m &quot;此次修改的一些说明&quot;</code></li><li>修改最近一次提交的 commit message：<code>git commit --amend -m &quot;Updated commit message&quot; 或 git commit --amend // 后面是vim命令 w: 写入 q: 退出</code></li><li>使⽤某个分⽀的 commit 到另外⼀个分⽀： <code>git cherry-pick [commit hash]</code> ，多个 commit 包括前⼀个和后⼀个，不包括前⼀个 commit 去掉 <code>^</code> ： <code>git cherry-pick [commit hash]^..[commit hash]</code></li><li>git 的忽略文件，也就是上传的时候不用管：</li></ul><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>*.txt</span><span>    //忽略所有的 .txt 文件</span></span>
<span class="line"><span>/util      //忽略这个 util 目录</span></span>
<span class="line"><span>/util/*.js      //忽略 util 文件夹下的 .js 文件</span></span>
<span class="line"><span>/util/**/*.js    //递归的忽略这个文件夹下所有的 .js 文件</span></span></code></pre></div><ul><li>查看日志：<code>git log</code> <code>git log --oneline</code></li><li>分支管理：</li></ul><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch      //查看所有的分支</span></span>
<span class="line"><span>git branch dev  //创建 dev 分支</span></span>
<span class="line"><span>git checkout dev  //切换到 dev 分支上(在这个分支上修改后再合并)</span></span>
<span class="line"><span>(以上两步简写：git checkout -b dev)</span></span>
<span class="line"><span>在这个分支上就可以操作 add  commit 等操作</span></span>
<span class="line"><span></span></span>
<span class="line"><span>操作完成后我们就可以与主分支合并</span></span>
<span class="line"><span>合并分支</span></span>
<span class="line"><span>首先切换到主分支上</span></span>
<span class="line"><span>git checkout master</span></span>
<span class="line"><span>git merge  分支名</span></span>
<span class="line"><span>git merge --abort // 撤销merge合并</span></span>
<span class="line"><span></span></span>
<span class="line"><span>删除分支</span></span>
<span class="line"><span>git branch -d dev  //删除dev分支</span></span></code></pre></div><ul><li>git 切换仓库操作：<code>git remote set-url origin http://xxx.git</code></li><li>查看仓库远程地址：<code>git remote -v</code></li><li>暂存区操作：</li></ul><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git add . // 先将更改的内容提交到暂存区</span></span>
<span class="line"><span>git stash // 将此时更改的内容暂存起来(此时就可以切换到其他分支就行操作了,</span></span>
<span class="line"><span>等处理完在切回本分支(git checkout 分支名), 还原以前的,继续操作)</span></span>
<span class="line"><span>git stash apply // 恢复却不删除 stash 的内容</span></span>
<span class="line"><span>git stash pop  // 恢复并且删除 stash 信息</span></span>
<span class="line"><span>git stash list // 查看此时的暂存列表</span></span>
<span class="line"><span>git stash drop  // 删除这个分支上的所有的 stash</span></span></code></pre></div><ul><li>版本回退操作：</li></ul><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout .    //将工作区的代码恢复到上一次 commit 之前</span></span>
<span class="line"><span>git reset .  //将暂存区的内容恢复到工作区</span></span>
<span class="line"><span>git reset --hard 提交信息编号之间的区别  //回到指定的版本</span></span>
<span class="line"><span>git add . //将工作区的内容添加到暂存区</span></span>
<span class="line"><span>git add . 和 git reset . 是相反的两对</span></span></code></pre></div><ul><li><code>git fetch</code> 和 <code>git push</code> 的区别：</li></ul><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git fetch 相当于是从远程获取最新到本地，不会自动 merge</span></span>
<span class="line"><span>git pull：相当于是从远程获取最新版本并 merge 到本地</span></span>
<span class="line"><span>在实际使用中，git fetch 更安全一些</span></span></code></pre></div><ul><li><code>git mv</code> 迁移文件或重命名文件（夹）（<a href="https://initialcommit.com/blog/git-mv" target="_blank" rel="noreferrer">Git Mv | How To Use Git-Mv To Rename And Move Files</a>）</li></ul><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> // 迁移aaaaManage文件夹下的所有文件到「packages/aaaa-manage/views/」路径下（不包括「aaaaManage」文件夹）</span></span>
<span class="line"><span> git mv views/aaaaManage/* packages/aaaa-manage/views/</span></span>
<span class="line"><span></span></span>
<span class="line"><span> // 迁移aaaaManage文件夹下的「index.ts」到「packages/aaaa-manage/views/」路径下</span></span>
<span class="line"><span> git mv views/aaaaManage/index.ts packages/aaaa-manage/views/</span></span>
<span class="line"><span></span></span>
<span class="line"><span> // 重命名文件「index.ts」为「config.ts」</span></span>
<span class="line"><span> git mv views/aaaaManage/index.ts views/aaaaManage/config.ts</span></span>
<span class="line"><span></span></span>
<span class="line"><span> // 注意该命令没有撤回操作，如果迁移错了，在工作区文件或暂存区文件重置改动即可恢复之前状态</span></span></code></pre></div><ul><li>git rm 删除文件或文件夹</li></ul><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</span></span>
<span class="line"><span>git rm -f xxx</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件</span></span>
<span class="line"><span>git rm -r xxx</span></span></code></pre></div><ul><li>git revrt 回滚 commit 记录，⼀般⽤于回滚分⽀ commit ID 记录层级⽐较深的且不影响其他 提交的 commit ID 记录：</li></ul><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> // ⾮ merge 的 commit</span></span>
<span class="line"><span> git revert [commit hash]</span></span>
<span class="line"><span></span></span>
<span class="line"><span> // merge 类型的 commit，第⼀个 hash 为编号1，第⼆个 hash 为编号 2，以哪个⽗ hash 为主线则保留哪个，删除另⼀个</span></span>
<span class="line"><span> git revert -m [1|2] [commit hash]</span></span>
<span class="line"><span> // 如下图，则回滚 bd86846 的提交，且以 ba25a9d master 分⽀为主线保留，回滚掉 1c7036f 所在分⽀提交</span></span>
<span class="line"><span> git revert -m 1 bd86846</span></span></code></pre></div>`,31),d=e(`<ul><li><code>git rebase -i</code> ⼀般⽤于合并分⽀ commit 记录⽇志⽐较混乱情况合并为⼀个 commit 记录或 修改 commit 记录操作，⽐如丢弃某个 commit 记录：</li></ul><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 调整最近提交的 3 次⽇志修改</span></span>
<span class="line"><span>git rebase -i HEAD~3</span></span></code></pre></div><ul><li>删除项目 Git 所有记录信息：<code>rm -rf .git</code></li></ul><h2 id="六、ssh-查看-pm2-日志" tabindex="-1">六、SSH 查看 PM2 日志 <a class="header-anchor" href="#六、ssh-查看-pm2-日志" aria-label="Permalink to &quot;六、SSH 查看 PM2 日志&quot;">​</a></h2><p>前提要有权限：</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ssh root@ip</span></span>
<span class="line"><span></span></span>
<span class="line"><span>启动本地静态文件服务</span></span>
<span class="line"><span>python -m SimpleHTTPServer</span></span>
<span class="line"><span></span></span>
<span class="line"><span>退出服务器连接</span></span>
<span class="line"><span>exit + 回车键</span></span></code></pre></div><h2 id="七、连接数据库" tabindex="-1">七、连接数据库 <a class="header-anchor" href="#七、连接数据库" aria-label="Permalink to &quot;七、连接数据库&quot;">​</a></h2><p>通过软件 Sequel Pro:</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ip:端口号</span></span>
<span class="line"><span>账号：root</span></span>
<span class="line"><span>密码</span></span></code></pre></div><h2 id="八、vs-code-快捷键" tabindex="-1">八、VS Code 快捷键 <a class="header-anchor" href="#八、vs-code-快捷键" aria-label="Permalink to &quot;八、VS Code 快捷键&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>cmd+左右方向键</code></td><td>行代码左右切换（Win 的快捷键是「Fn + 左右方向键」）</td></tr><tr><td><code>option+左右方向键</code></td><td>单词之间左右切换（Win 快捷键是「Ctrl + 左右方向键」）</td></tr><tr><td><code>cmd+shift+\\\\</code></td><td>代码块之间上下移动</td></tr><tr><td><code>cmd+delete</code></td><td>删除光标之前的内容</td></tr><tr><td><code>cmd+shift+k</code></td><td>删除整行内容（win：Ctrl + Shift + K）</td></tr><tr><td><code>option+上下方向键</code></td><td>上下移动当前行代码位置（win：Alt + 上下方向键）</td></tr><tr><td><code>option+shif+ 上下方向键</code></td><td>将代码向上下复制（win：Alt + Shift +上下方向键）</td></tr><tr><td><code>cmd+/</code></td><td>单行注释</td></tr><tr><td><code>ctrl+左右方向键</code></td><td>当前屏幕的视图窗口左右切换</td></tr><tr><td><code>ctrl+上下方向键</code></td><td>缩小屏幕窗口进入视图窗口切换</td></tr><tr><td><code>cmd+p</code></td><td>当前项目工程搜索文件（win：Ctrl + P）</td></tr><tr><td><code>ctrl+g</code></td><td>跳转到指定行</td></tr><tr><td><code>cmd+shift+o</code></td><td>在当前文件的各种div元素之间跳转</td></tr><tr><td><code>cmd+f</code></td><td>在当前的文件中搜索，光标在搜索框</td></tr><tr><td><code>cmd+g</code></td><td>在当前的文件中切换匹配搜索项，光标停留在编辑器里（win：f3）</td></tr><tr><td>多光标使用：</td><td>（1）按住 「Option」键（windows 用户是按住「Alt」键） ，然后在页面中希望中现光标的位置点击鼠标。（2）选中某个文本，然后反复按住快捷键「 Cmd + D 」键（windows 用户是按住「Ctrl + D」键）， 即可将全文中与光标当前所在位置的词相同的词逐一加入选择。</td></tr></tbody></table><p><a href="https://juejin.im/post/5e2024485188254df874102b" target="_blank" rel="noreferrer">动图演示23个鲜为人知的VSCode快捷键</a></p><h2 id="九、mac-终端" tabindex="-1">九、Mac 终端 <a class="header-anchor" href="#九、mac-终端" aria-label="Permalink to &quot;九、Mac 终端&quot;">​</a></h2><ul><li>新建文件夹：<code>mkdir xxx</code></li><li>新建构建：<code>touch xxx</code></li><li>切换目录：<code>cd xxx</code></li><li>查看文件内容：<code>cat xxx</code></li><li>复制文件或目录：<code>cp xxx yyy</code></li><li>编辑文件：<code>vi xxx</code></li><li>访达打开文件：<code>open xxx</code></li><li>所列当前目录所有文件：<code>ls</code></li><li>删除文件：<code>rm xxx</code></li><li>清屏：<code>clear</code></li><li>查看当前目录：<code>pwd</code></li><li>退出终端：<code>exit</code></li></ul><h2 id="十、命令行在线查询网站" tabindex="-1">十、命令行在线查询网站 <a class="header-anchor" href="#十、命令行在线查询网站" aria-label="Permalink to &quot;十、命令行在线查询网站&quot;">​</a></h2><p><a href="https://explainshell.com" target="_blank" rel="noreferrer">G</a><a href="https://explainshell.com" target="_blank" rel="noreferrer">o Into</a></p>`,16);function p(r,g,h,m,u,x){const a=i("CustomImage");return l(),t("div",{"data-pagefind-body":!0},[c,s(a,{src:"/growth-record/other/toolGuide/command-line-01.png"}),d,s(a,{src:"/growth-record/other/toolGuide/minglingxing.webp",alt:"command-line"})])}const k=n(o,[["render",p]]);export{v as __pageData,k as default};
