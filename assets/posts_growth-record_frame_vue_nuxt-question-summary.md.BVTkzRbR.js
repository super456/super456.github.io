import{_ as n,D as s,c as i,o as l,a6 as r,I as o,j as e,a as t}from"./chunks/framework.BOyJDVBP.js";const E=JSON.parse('{"title":"Nuxt 开发问题总结","description":"","frontmatter":{"title":"Nuxt 开发问题总结","date":"2020-07-11T20:00:00.000Z","tags":["Vue","Nuxt"],"categories":["前端进击"]},"headers":[],"relativePath":"posts/growth-record/frame/vue/nuxt-question-summary.md","filePath":"posts/growth-record/frame/vue/nuxt-question-summary.md","lastUpdated":1713625033000}'),c={name:"posts/growth-record/frame/vue/nuxt-question-summary.md"},d=r('<h1 id="nuxt-开发问题总结" tabindex="-1">Nuxt 开发问题总结 <a class="header-anchor" href="#nuxt-开发问题总结" aria-label="Permalink to &quot;Nuxt 开发问题总结&quot;">​</a></h1><h2 id="内网部署开发环境部分资源加载失败" tabindex="-1">内网部署开发环境部分资源加载失败 <a class="header-anchor" href="#内网部署开发环境部分资源加载失败" aria-label="Permalink to &quot;内网部署开发环境部分资源加载失败&quot;">​</a></h2><h3 id="一、问题描述" tabindex="-1">一、问题描述 <a class="header-anchor" href="#一、问题描述" aria-label="Permalink to &quot;一、问题描述&quot;">​</a></h3><p>构建完开发环境之后，打开域名一看，首页一些图片和样式没显示：</p>',4),h=e("p",null,"打开控制台报错信息：",-1),u=r(`<p>查看报错信息是，确定是部分资源请求失败了，所以导致没有显示出来。</p><h3 id="二、问题分析" tabindex="-1">二、问题分析 <a class="header-anchor" href="#二、问题分析" aria-label="Permalink to &quot;二、问题分析&quot;">​</a></h3><p>经过查看调试后发现：服务器磁盘空间满了。因为磁盘空间满了会造成服务访问不可用。</p><h3 id="三、解决方法" tabindex="-1">三、解决方法 <a class="header-anchor" href="#三、解决方法" aria-label="Permalink to &quot;三、解决方法&quot;">​</a></h3><p>所以释放磁盘空间就可以了正常访问了。</p><h2 id="build、start-启动服务之后谷歌浏览器无法调试" tabindex="-1">build、start 启动服务之后谷歌浏览器无法调试 <a class="header-anchor" href="#build、start-启动服务之后谷歌浏览器无法调试" aria-label="Permalink to &quot;build、start 启动服务之后谷歌浏览器无法调试&quot;">​</a></h2><h3 id="一、问题描述-1" tabindex="-1">一、问题描述 <a class="header-anchor" href="#一、问题描述-1" aria-label="Permalink to &quot;一、问题描述&quot;">​</a></h3><p>为了验证一个内网部署开发环境问题，需要本地构建和启动服务</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打包项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动项目服务监听</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><p>该本地端口的项目已经停止服务了，但是谷歌浏览器可以访问到这个端口的静态服务（都是打包生成好的）</p>`,10),p=e("p",null,"然后问题出现了，启动本地这个项目的服务（已经关闭了上图的 start 服务了），修改了代码谷歌浏览器无法正常调试（没有任何效果），控制台 Console 一直报这个提示：",-1),_=e("p",null,"重启电脑也没用（因为以为关闭端口后就好了的问题，但是查了电脑进程是没有这个端口服务的），但换个浏览器就可以，才发现是谷歌浏览器的。所以是谷歌浏览器的 PWA 问题。",-1),m=e("h3",{id:"二、问题分析-1",tabindex:"-1"},[t("二、问题分析 "),e("a",{class:"header-anchor",href:"#二、问题分析-1","aria-label":'Permalink to "二、问题分析"'},"​")],-1),g=e("p",null,[t("这个问题是在执行了 "),e("code",null,"yarn build"),t(" 之后，谷歌浏览器对访问这个项目服务注册了一个类似谷歌应用程序的工具，导致数据一直访问都是之前打包好的。跟谷歌浏览器的 Service Workers 自动设置也有关，保存了 SW 缓存数据，每次这个端口号都是返回这个缓存数据的服务。")],-1),b=e("h3",{id:"三、解决方法-1",tabindex:"-1"},[t("三、解决方法 "),e("a",{class:"header-anchor",href:"#三、解决方法-1","aria-label":'Permalink to "三、解决方法"'},"​")],-1),f=e("p",null,"1、查看这个应用程序是否存在：",-1),x=e("p",null,"2、关闭这个已经存在的应用程序服务：",-1),k=e("h2",{id:"component-切换组件与插槽问题",tabindex:"-1"},[t("component 切换组件与插槽问题 "),e("a",{class:"header-anchor",href:"#component-切换组件与插槽问题","aria-label":'Permalink to "component 切换组件与插槽问题"'},"​")],-1),q=e("h3",{id:"一、问题描述-2",tabindex:"-1"},[t("一、问题描述 "),e("a",{class:"header-anchor",href:"#一、问题描述-2","aria-label":'Permalink to "一、问题描述"'},"​")],-1),v=e("p",null,[t("使用 "),e("code",null,"<component></component>"),t(" 根据默认设置 "),e("code",null,"current"),t(" 变量设置默认赋值及切换不同的组件时候，因为服务端渲染的原因，会报错误，且，组件内使用插槽，会重复渲染两次，但当 "),e("code",null,"current"),t(" 生命周期内切换就不会了。")],-1),T=e("p",null,[t("当 "),e("code",null,"current"),t(" 有默认值时候服务端报渲染错误（图上），组件内使用插槽，会重复渲染两次（图下）：")],-1),P=r('<h3 id="二、问题分析-2" tabindex="-1">二、问题分析 <a class="header-anchor" href="#二、问题分析-2" aria-label="Permalink to &quot;二、问题分析&quot;">​</a></h3><p>由于服务端渲染框架问题，页面在服务端就有生命周期执行，页面会开始初始化及数据，所以公共组件的激活组件名参数 <code>current</code> 有默认值的话，会使用渲染，但在客户端生命周期切换这个默认值的话，会在客户端渲染，这个不会报渲染错及插槽被渲染两次问题。</p><h3 id="三、解决方法-2" tabindex="-1">三、解决方法 <a class="header-anchor" href="#三、解决方法-2" aria-label="Permalink to &quot;三、解决方法&quot;">​</a></h3><p>将公共组件的激活组件名参数 <code>current</code> 默认值为空，在服务端就不会先渲染了，然后在客户端生命周期函数设置默认值即可。</p><h2 id="客户端渲染报错问题" tabindex="-1">客户端渲染报错问题 <a class="header-anchor" href="#客户端渲染报错问题" aria-label="Permalink to &quot;客户端渲染报错问题&quot;">​</a></h2><h3 id="一、服务端和客户端所渲染的dom树不同造成错误。" tabindex="-1">一、服务端和客户端所渲染的dom树不同造成错误。 <a class="header-anchor" href="#一、服务端和客户端所渲染的dom树不同造成错误。" aria-label="Permalink to &quot;一、服务端和客户端所渲染的dom树不同造成错误。&quot;">​</a></h3><blockquote><p><a href="https://github.com/yinxin630/blog/issues/31" target="_blank" rel="noreferrer">https://github.com/yinxin630/blog/issues/31</a></p></blockquote><p><strong>报错内容：</strong> 开发环境报错 [Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <code>&lt;p&gt;</code>, or missing <code>&lt;tbody&gt;</code>. Bailing hydration and performing full client-side render.</p>',8),y=e("p",null,"dev 环境报错： TypeError:n.setAttribute is not a function",-1),w=e("p",null,[e("strong",null,"排查手段："),t(" 在相关页面通过关闭一些组件来寻找是否还是报错。一般问题是出现在"),e("strong",null,"v-if"),t("身上，本次错误是有个组件用了 "),e("code",null,"v-if"),t(" 判断，而该值又是在 "),e("code",null,"process.client"),t(" 之后才确定是 "),e("code",null,"false"),t(" 还是 "),e("code",null,"true"),t("，导致服务端没渲染出这个，而客户端又有了这个，然后报错了。")],-1),A=r("<p><strong>解决手段：</strong><code>v-if</code> 改为 <code>v-show</code> 即可。</p><p><strong>总结：</strong></p><ol><li>使用 Nuxt 时最好不要在 <code>created</code>（包括 <code>created</code>）之前做 DOM 相关内容的判断，这样才能保证服务端和客户端初次渲染时内容一致；</li><li>在开发模式下，Vue 将推断客户端生成的虚拟 DOM 树 (virtual DOM tree)，是否与从服务器渲染的 DOM 结构 (DOM structure) 匹配。如果无法匹配，它将退出混合模式，丢弃现有的 DOM 并从头开始渲染。在生产模式下，此检测会被跳过，以避免性能损耗。所以开发模式下只是报错，而 dev 生产模式下直接就加载不出界面了</li></ol><p><strong>其他：</strong></p><ol><li>Nuxt 在 ssr 是会执行到 <strong>created</strong> 周期的，然后客户端也会从正常生命周期开始执行；</li><li>可以通过判断 <strong>process.client</strong>，来让一些事件只在客户端执行；</li></ol><p>额外内容可以看上面 Github 博文</p>",6);function C(D,S,N,V,I,F){const a=s("CustomImage");return l(),i("div",{"data-pagefind-body":!0},[d,o(a,{src:"/growth-record/frame/vue/nuxt-question-01.png"}),h,o(a,{src:"/growth-record/frame/vue/nuxt-question-02.png"}),u,o(a,{src:"/growth-record/frame/vue/nuxt-question-03.png"}),p,o(a,{src:"/growth-record/frame/vue/nuxt-question-04.png"}),_,m,g,b,f,o(a,{src:"/growth-record/frame/vue/nuxt-question-05.png"}),x,o(a,{src:"/growth-record/frame/vue/nuxt-question-06.webp"}),k,q,v,o(a,{src:"/growth-record/frame/vue/nuxt-question-07.png"}),T,o(a,{src:"/growth-record/frame/vue/nuxt-question-08.png"}),P,o(a,{src:"/growth-record/frame/vue/nuxt-question-09.png"}),y,o(a,{src:"/growth-record/frame/vue/nuxt-question-10.png"}),w,o(a,{src:"/growth-record/frame/vue/nuxt-question-11.png"}),o(a,{src:"/growth-record/frame/vue/nuxt-question-12.webp"}),A])}const M=n(c,[["render",C]]);export{E as __pageData,M as default};
